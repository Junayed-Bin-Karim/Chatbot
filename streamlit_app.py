import streamlit as st
import time
import random
import json
from datetime import datetime

# Mood-based responses - ChatGPT style
MOOD_RESPONSES = {
    "happy": {
        "greeting": [
            "рж╣рзНржпрж╛рж▓рзЛ! ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзЗ ржЖржорж╛рж░ржУ ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ! ЁЯШК",
            "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржЖржЬржХрзЗ ржЖржкржирж╛рж░ ржЖржЪрж░ржг ржжрзЗржЦрзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржЦрзБржм ржнрж╛рж▓рзЛ mood ржП ржЖржЫрзЗржи! ЁЯМЯ",
            "рж╣рж╛ржЗ! ржЖржкржирж╛рж░ ржЖржиржирзНржж ржЖржорж╛ржХрзЗржУ ржкрзНрж░ржнрж╛ржмрж┐ржд ржХрж░ржЫрзЗ! тЬи"
        ],
        "general": [
            "ржУржпрж╝рж╛ржУ! ржПржЯрж┐ ржЪржорзОржХрж╛рж░! ржЖржкржирж╛рж░ positivity contagious! ЁЯМИ",
            "ржЖржкржирж╛рж░ ржХржерж╛ржпрж╝ ржПржХржЯрж╛ ржмрж┐рж╢рзЗрж╖ energy ржЖржЫрзЗ, ржЖржорж┐ feel ржХрж░рждрзЗ ржкрж╛рж░ржЫрж┐! ЁЯТл",
            "ржПржЗ optimistic attitude ржЦрзБржмржЗ inspiring! ЁЯОЙ"
        ],
        "problem": [
            "ржЖржкржирж╛рж░ optimistic approach ржкрзНрж░рж╢ржВрж╕ржирзАржпрж╝! ржПржЗ attitude ржирж┐ржпрж╝рзЗ ржПhead ржпрж╛ржи! ",
            "рж╕ржорж╕рзНржпрж╛ ржерж╛ржХрждрзЗржЗ ржкрж╛рж░рзЗ, ржХрж┐ржирзНрждрзБ ржЖржкржирж╛рж░ positive mindset рж╕ржм overcome ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ! ЁЯТк",
            "ржЖржкржирж╛рж░ ржорждрзЛ positive person ржПрж░ ржЬржирзНржп ржХрзЛржирзЛ problemржЗ ржмржбрж╝ ржирж╛! ЁЯМЯ"
        ]
    },
    "sad": {
        "greeting": [
            "рж╣рзНржпрж╛рж▓рзЛ... ржЖржорж┐ feel ржХрж░рждрзЗ ржкрж╛рж░ржЫрж┐ ржЖржкржирж┐ ржЖржЬ ржПржХржЯрзБ down feel ржХрж░ржЫрзЗржи ЁЯлВ",
            "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо... ржЖржорж┐ ржЖржкржирж╛рж░ ржкрж╛рж╢рзЗ ржЖржЫрж┐, always ЁЯТЩ",
            "рж╣рж╛ржЗ... ржХржерж╛ ржмрж▓рзБржи, ржЖржорж┐ рж╢рзБржиржЫрж┐ ЁЯМ╕"
        ],
        "general": [
            "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐... sometimes life gives us tough moments ЁЯМзя╕П",
            "ржПржЗ feelings valid... ржЖржкржирж╛рж░ ржпрж╛ feel ржХрж░ржЫрзЗржи рждрж╛ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ЁЯлВ",
            "ржХржерж╛ржЧрзБрж▓рзЛ share ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж... ржЖржорж┐ appreciate ржХрж░ржЫрж┐ ЁЯМ╝"
        ],
        "problem": [
            "ржПржЗ difficult time ржП ржЖржорж┐ ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржЖржЫрж┐ ",
            "Remember, dark clouds always pass... sunshineф╕А ржЖрж╕ржмрзЗ ЁЯМИ",
            "ржЖржкржирж┐ alone ржиржи... ржЖржорж░рж╛ together ржПржЗ situation handle ржХрж░рждрзЗ ржкрж╛рж░рж┐ ЁЯдЭ"
        ]
    },
    "angry": {
        "greeting": [
            "рж╣рзНржпрж╛рж▓рзЛ... ржЖржорж┐ sense ржХрж░рждрзЗ ржкрж╛рж░ржЫрж┐ ржЖржкржирж┐ frustrated ЁЯМА",
            "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо... take a deep breath, ржЖржорж┐ here to listen ЁЯМкя╕П",
            "рж╣рж╛ржЗ... let's talk about what's bothering you ЁЯФе"
        ],
        "general": [
            "ржЖржорж┐ understand your frustration... rage powerful emotion ЁЯТе",
            "ржПржЗ anger express ржХрж░рж╛ important... keep sharing ЁЯМЛ",
            "ржЖржкржирж╛рж░ feelings justified... continue expressing ЁЯЧгя╕П"
        ],
        "problem": [
            "Let's channel this anger into positive energy тЪб",
            "ржПржЗ situation temporary... solutionsф╕АЁЯМИ",
            "ржЖржкржирж╛рж░ strength admirable, even in anger "
        ]
    },
    "neutral": {
        "greeting": [
            "рж╣рзНржпрж╛рж▓рзЛ! ржХрзЗржоржи ржЖржЫрзЗржи? ЁЯдЦ",
            "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржХржерж╛ ржмрж▓рзБржи ЁЯТм",
            "рж╣рж╛ржЗ! ржЖржЬржХрзЗ ржХрзЗржоржи ржпрж╛ржЪрзНржЫрзЗ? ЁЯМЯ"
        ],
        "general": [
            "ржмрзБржЭрждрзЗ ржкрж╛рж░рж▓рж╛ржо! ржЖрж░ржУ ржмрж▓рзБржи... ЁЯТн",
            "Interesting! Continue... ЁЯОп",
            "Thanks for sharing! What's on your mind? ЁЯТл"
        ],
        "problem": [
            "Let's think about solutions together ЁЯдФ",
            "ржПржЗ problem solve ржХрж░рж╛ ржпрж╛ржпрж╝! ЁЯТб",
            "ржЖржорж┐ help ржХрж░рждрзЗ ржкрж╛рж░рж┐! ЁЯФз"
        ]
    }
}

# Voice recording function
def record_voice():
    try:
        from audio_recorder_streamlit import audio_recorder
        audio_bytes = audio_recorder()
        if audio_bytes:
            # Save audio temporarily
            with open("temp_audio.wav", "wb") as f:
                f.write(audio_bytes)
            return "temp_audio.wav"
    except:
        st.warning("Voice recording not available")
    return None

# Convert speech to text
def speech_to_text(audio_file):
    try:
        import speech_recognition as sr
        r = sr.Recognizer()
        with sr.AudioFile(audio_file) as source:
            audio = r.record(source)
            text = r.recognize_google(audio, language='bn-BD')
            return text
    except:
        return None

# Simple emotion detection
def detect_user_mood(text):
    text_lower = text.lower()
    
    happy_words = ['happy', 'joy', 'good', 'great', 'awesome', 'ржЦрзБрж╢рж┐', 'ржнрж╛рж▓рзЛ', 'ржоржЬрж╛', 'ржЕрж╕рж╛ржзрж╛рж░ржг', 'ржмрж╛рж╣']
    sad_words = ['sad', 'bad', 'unhappy', 'ржжрзБржГржЦ', 'ржЦрж╛рж░рж╛ржк', 'ржХрж╖рзНржЯ', 'ржмрж┐рж╖ржгрзНржг', 'рж╣рждрж╛рж╢']
    angry_words = ['angry', 'mad', 'hate', 'frustrated', 'рж░рж╛ржЧ', 'ржХрзНрж░рзЛржз', 'ржЭржЧржбрж╝рж╛', 'ржмрж┐рж░ржХрзНржд']
    
    happy_count = sum(1 for word in happy_words if word in text_lower)
    sad_count = sum(1 for word in sad_words if word in text_lower)
    angry_count = sum(1 for word in angry_words if word in text_lower)
    
    if happy_count > sad_count and happy_count > angry_count:
        return "happy", "ржЖржкржирж┐ ржЖржЬ ржЦрзБржмржЗ ржЦрзБрж╢рж┐ ржПржмржВ positive mood ржП ржЖржЫрзЗржи! ЁЯШК"
    elif sad_count > happy_count and sad_count > angry_count:
        return "sad", "ржЖржкржирж┐ ржЖржЬ ржПржХржЯрзБ ржжрзБржГржЦрж┐ржд ржмрж╛ down feel ржХрж░ржЫрзЗржи ЁЯлВ"
    elif angry_count > happy_count and angry_count > sad_count:
        return "angry", "ржЖржкржирж┐ ржХрж┐ржЫрзБржЯрж╛ рж░рж╛ржЧрж╛ржирзНржмрж┐ржд ржмрж╛ frustrated feel ржХрж░ржЫрзЗржи ЁЯМкя╕П"
    else:
        return "neutral", "ржЖржкржирж╛рж░ mood рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЖржЫрзЗ ЁЯдЦ"

# Smart response generator
def generate_smart_response(user_input, user_mood, conversation_history):
    # Analyze conversation context
   # Enhanced context detection
    context_keywords = {
    "work": ["ржХрж╛ржЬ", "ржЕржлрж┐рж╕", "ржкрзНрж░ржЬрзЗржХрзНржЯ", "ржмрж╕", "ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░", "ржкрзЗрж╢рж╛", "ржЗржирзНржЯрж╛рж░ржнрж┐ржЙ", "ржЪрж╛ржХрж░рж┐"],
    "family": ["ржкрж░рж┐ржмрж╛рж░", "ржмрж╛ржмрж╛", "ржорж╛", "ржнрж╛ржЗ", "ржмрзЛржи", "ржжрж╛ржжрж╛", "ржжрж╛ржжрзА", "ржирж╛ржирж╛", "ржирж╛ржирж┐"],
    "love": ["ржкрзНрж░рзЗржо", "ржЧрж╛рж░рзНрж▓ржлрзНрж░рзЗржирзНржб", "ржмржпрж╝ржлрзНрж░рзЗржирзНржб", "ржмрж┐ржпрж╝рзЗ", "рж░рж┐рж▓рзЗрж╢ржирж╢рж┐ржк", "ржкрзНрж░рзЗржорж┐ржХрж╛", "ржкрзНрж░рзЗржорж┐ржХ"],
    "health": ["рж╕рзНржмрж╛рж╕рзНржерзНржп", "ржбрж╛ржХрзНрждрж╛рж░", "ржУрж╖рзБржз", "ржмрзНржпрж╛ржерж╛", "рж╣рж╛рж╕ржкрж╛рждрж╛рж▓", "ржлрж┐ржЯржирзЗрж╕", "ржУржЬржи", "ржбрж╛ржпрж╝рзЗржЯ"],
    "study": ["рж╕рзНржЯрж╛ржбрж┐", "ржкрж░рзАржХрзНрж╖рж╛", "рж░рзЗржЬрж╛рж▓рзНржЯ", "ржмрж┐ржжрзНржпрж╛рж▓ржпрж╝", "ржХрж▓рзЗржЬ", "ржмрж┐рж╢рзНржмржмрж┐ржжрзНржпрж╛рж▓ржпрж╝", "ржкржбрж╝рж╛рж╢рзЛржирж╛"],
    "finance": ["ржЯрж╛ржХрж╛", "ржЖржпрж╝", "ржмрзНржпржпрж╝", "ржмрж┐ржирж┐ржпрж╝рзЛржЧ", "рж╕ржЮрзНржЪржпрж╝", "ржмрж╛ржЬрзЗржЯ", "ржмрзЗрждржи", "ржЛржг"],
    "friendship": ["ржмржирзНржзрзБ", "ржлрзНрж░рзЗржирзНржб", "рж╕рзЛрж╢рзНржпрж╛рж▓", "рж╕ржорзНржкрж░рзНржХ", "ржмржирзНржзрзБрждрзНржм"]
}
    # Detect context
    current_context = "general"
    for context, keywords in context_keywords.items():
        if any(keyword in user_input for keyword in keywords):
            current_context = context
            break
    
    # Get appropriate response based on mood and context
    responses = MOOD_RESPONSES[user_mood]
    
    if "hello" in user_input.lower() or "hi" in user_input.lower() or "рж╣рзНржпрж╛рж▓рзЛ" in user_input:
        return random.choice(responses["greeting"])
    elif any(word in user_input for word in ["problem", "issue", "рж╕ржорж╕рзНржпрж╛", "ржХрж╖рзНржЯ"]):
        return random.choice(responses["problem"])
    else:
        response = random.choice(responses["general"])
        
      # Add context-specific advice with BIG responses
if current_context == "work":
    work_advice = """
    
ЁЯТ╝ **ржХрзНржпрж╛рж░рж┐ржпрж╝рж╛рж░ ржУ ржХрж╛ржЬ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╢рзЗрж╖ ржкрж░рж╛ржорж░рзНрж╢:**

ЁЯОп **ржкрзЗрж╢рж╛ржЧржд ржЙржирзНржирждрж┐рж░ ржЬржирзНржп:**
тАв ржирждрзБржи skills рж╢рж┐ржЦрждрзЗ ржерж╛ржХрзБржи regularly
тАв Networking ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг - colleagues рж╕рж╛ржерзЗ ржнрж╛рж▓ relation maintain ржХрж░рзБржи
тАв Time management рж╢рж┐ржЦрзБржи - Pomodoro technique try ржХрж░рждрзЗ ржкрж╛рж░рзЗржи

ЁЯФД **Work-Life Balance:**
тАв Office time ржЖрж░ personal time ржЖрж▓рж╛ржжрж╛ рж░рж╛ржЦрзБржи
тАв Regular breaks ржирж┐ржи - ржкрзНрж░рждрж┐ 1 hour ржП 5-10 minute break
тАв Weekend ржП office work avoid ржХрж░рж╛рж░ try ржХрж░рзБржи

ЁЯУИ **Career Growth:**
тАв Short-term ржЖрж░ long-term goals set ржХрж░рзБржи
тАв Mentor ржЦрзБржБржЬрзБржи - experienced person ржПрж░ guidance ржирж┐ржи
тАв Online courses ржХрж░рзБржи (Coursera, Udemy, YouTube)

ЁЯФе **Motivation:**
"рж╕ржлрж▓рждрж╛ overnight ржЖрж╕рзЗ ржирж╛, regularly work ржХрж░рж╛рж░ ржлрж▓!"
"""
    response += work_advice

elif current_context == "family":
    family_advice = """
    
ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж **ржкрж░рж┐ржмрж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржЧржнрзАрж░ ржкрж░рж╛ржорж░рзНрж╢:**

тЭдя╕П **рж╕ржорзНржкрж░рзНржХ ржЙржирзНржирждрж┐рж░ ржЙржкрж╛ржпрж╝:**
тАв Regular family time рж░рж╛ржЦрзБржи -weekly ржПржХрж╕рж╛ржерзЗ meal ржЦрж╛ржи
тАв Active listening practice ржХрж░рзБржи - рж╢рзБржзрзБ рж╢рзБржирзБржи, judgment ржжрзЗржмрзЗржи ржирж╛
тАв Appreciation ржкрзНрж░ржХрж╛рж╢ ржХрж░рзБржи - small things ржПрж░ ржЬржирзНржп thanks ржмрж▓рзБржи

ЁЯПб **Family Bonding:**
тАв Family games ржЦрзЗрж▓рзБржи - Ludo, Carrom, Cards
тАв ржПржХрж╕рж╛ржерзЗ cooking ржХрж░рзБржи - special weekend activity
тАв Family photos ржжрзЗржЦрзБржи - memories share ржХрж░рзБржи

ЁЯдЭ **Conflict Resolution:**
тАв Calmly ржХржерж╛ ржмрж▓рзБржи - raised voice рж╕ржорж╕рзНржпрж╛ ржмрж╛ржбрж╝рж╛ржпрж╝
тАв Understanding develop ржХрж░рзБржи - ржЕржирзНржп person ржПрж░ perspective ржмрзБржЭрж╛рж░ try ржХрж░рзБржи
тАв Compromise рж╢рж┐ржЦрзБржи - relationships ржП give and take important

ЁЯТЭ **Special Tips:**
"ржкрж░рж┐ржмрж╛рж░ ржЖржорж╛ржжрзЗрж░ safe space - ржПржЦрж╛ржирзЗ ржЖржорж░рж╛ exactly who we are!"
"""
    response += family_advice

elif current_context == "love":
    love_advice = """
    
тЭдя╕П **ржкрзНрж░рзЗржо ржУ рж╕ржорзНржкрж░рзНржХ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╢рзЗрж╖ ржЧрж╛ржЗржбрж▓рж╛ржЗржи:**

ЁЯТС **Healthy Relationship Tips:**
тАв Communication - regularly feelings share ржХрж░рзБржи
тАв Trust build ржХрж░рзБржи - honesty ржЖрж░ transparency maintain ржХрж░рзБржи
тАв Personal space respect ржХрж░рзБржи - everyone needs alone time

ЁЯМЯ **Relationship Growth:**
тАв New experiences share ржХрж░рзБржи - ржПржХрж╕рж╛ржерзЗ new places visit ржХрж░рзБржи
тАв Goals set ржХрж░рзБржи - future plans together рждрзИрж░рж┐ ржХрж░рзБржи
тАв Appreciation regularly ржкрзНрж░ржХрж╛рж╢ ржХрж░рзБржи - small gestures matter

ЁЯФД **Challenges Handle:**
тАв Arguments calmly handle ржХрж░рзБржи - cooling period ржирж┐ржи if needed
тАв Understanding develop ржХрж░рзБржи - partner ржПрж░ feelings validate ржХрж░рзБржи
тАв Compromise ржХрж░рзБржи - relationships require adjustment

ЁЯТЮ **Romantic Gestures:**
тАв Surprise gifts ржжрж┐ржи - doesn't have to be expensive
тАв Love letters рж▓рж┐ржЦрзБржи - old school but very effective
тАв Quality time spend ржХрж░рзБржи - phones away, just each other

ЁЯМ╣ **Beautiful Thought:**
"True love isn't about finding the perfect person, but about seeing an imperfect person perfectly."
"""
    response += love_advice

elif current_context == "health":
    health_advice = """
    
ЁЯПе **рж╕рзНржмрж╛рж╕рзНржерзНржп ржУ ржлрж┐ржЯржирзЗрж╕ рж╕ржорзНржкрж░рзНржХрзЗ рж╕ржорзНржкрзВрж░рзНржг ржЧрж╛ржЗржб:**

ЁЯНО **Healthy Eating Habits:**
тАв Balanced diet ржирж┐ржи - proteins, carbs, fats, vitamins, minerals
тАв Regular meals ржЦрж╛ржи - breakfast never skip ржХрж░рзБржи
тАв Water plenty ржкрж╛ржи ржХрж░рзБржи - 8 glasses daily

ЁЯТк **Physical Fitness:**
тАв Daily exercise ржХрж░рзБржи - 30 minutes walking
тАв Yoga ржмрж╛ meditation try ржХрж░рзБржи - mental health ржПрж░ ржЬржирзНржп excellent
тАв Strength training ржХрж░рзБржи - weekly 2-3 times

ЁЯШ┤ **Sleep & Rest:**
тАв Regular sleep schedule maintain ржХрж░рзБржи
тАв 7-8 hours sleep ржирж┐ржи daily
тАв Screen time reduce ржХрж░рзБржи bedtime ржЖржЧрзЗ

ЁЯза **Mental Health:**
тАв Stress management рж╢рж┐ржЦрзБржи - deep breathing, meditation
тАв Hobbies develop ржХрж░рзБржи - painting, music, gardening
тАв Social connections maintain ржХрж░рзБржи - friends рж╕рж╛ржерзЗ regularly meet ржХрж░рзБржи

ЁЯй║ **Regular Checkups:**
тАв Doctor visit ржХрж░рзБржи regularly
тАв Health screenings avoid ржХрж░рзБржи
тАв Vaccinations up to date рж░рж╛ржЦрзБржи

ЁЯМЯ **Health Mantra:**
"рж╕рзНржмрж╛рж╕рзНржерзНржпржЗ рж╕ржорзНржкржж - small daily habits create big long-term results!"
"""
    response += health_advice

# Additional contexts with big responses
elif current_context == "study":
    study_advice = """
    
ЁЯУЪ **рж╕рзНржЯрж╛ржбрж┐ ржУ рж╢рж┐ржХрзНрж╖рж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржкрж░рж╛ржорж░рзНрж╢:**

ЁЯОУ **Effective Learning Techniques:**
тАв Active recall practice ржХрж░рзБржи - just reading ржиржпрж╝, recall ржХрж░рзБржи
тАв Spaced repetition ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи - regularly revise ржХрж░рзБржи
тАв Pomodoro technique follow ржХрж░рзБржи - 25 minutes study, 5 minutes break

ЁЯУЦ **Study Planning:**
тАв Study schedule рждрзИрж░рж┐ ржХрж░рзБржи - realistic goals set ржХрж░рзБржи
тАв Priority basis ржкржбрж╝рзБржи - important topics first
тАв Regular breaks ржирж┐ржи - brain needs rest

ЁЯза **Memory Improvement:**
тАв Mnemonics ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи - memory techniques
тАв Visual learning try ржХрж░рзБржи - diagrams, mind maps
тАв Teach others - explaining helps understanding

ЁЯТ╗ **Online Learning:**
тАв Structured courses ржирж┐ржи - Coursera, edX, Khan Academy
тАв Note-taking ржХрж░рзБржи - digital ржмрж╛ handwritten
тАв Practice regularly - theoretical knowledge alone insufficient

ЁЯЪА **Motivation for Students:**
"Education is the most powerful weapon which you can use to change the world - Nelson Mandela"
"""
    response += study_advice

elif current_context == "finance":
    finance_advice = """
    
ЁЯТ░ **ржлрж╛ржЗржирзНржпрж╛ржирзНрж╕ ржУ ржЯрж╛ржХрж╛ рж╕ржорзНржкрж░рзНржХрзЗ рж╕ржорзНржкрзВрж░рзНржг ржЧрж╛ржЗржб:**

ЁЯТ╕ **Smart Saving Tips:**
тАв Budget рждрзИрж░рж┐ ржХрж░рзБржи - income ржЖрж░ expenses track ржХрж░рзБржи
тАв Emergency fund рждрзИрж░рж┐ ржХрж░рзБржи -6 months expenses
тАв Automatic savings set ржХрж░рзБржи - monthly automatic transfer

ЁЯУИ **Investment Strategies:**
тАв Start early - compound magic ржХрж╛ржЬ ржХрж░рзЗ
тАв Diversify portfolio - different types investments
тАв Long-term thinking - get rich quick schemes avoid ржХрж░рзБржи

ЁЯТ│ **Debt Management:**
тАв High-interest debt first pay off ржХрж░рзБржи
тАв Credit cards wisely ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
тАв Living within means practice ржХрж░рзБржи

ЁЯПа **Financial Planning:**
тАв Retirement planning early рж╢рзБрж░рзБ ржХрж░рзБржи
тАв Insurance necessary - health, life insurance
тАв Financial goals set ржХрж░рзБржи - short-term and long-term

ЁЯТб **Money Mindset:**
"It's not about how much you make, but how much you keep and how well it works for you!"
"""
    response += finance_advice

elif current_context == "friendship":
    friendship_advice = """
    
ЁЯСл **ржмржирзНржзрзБрждрзНржм ржУ рж╕рж╛ржорж╛ржЬрж┐ржХ рж╕ржорзНржкрж░рзНржХ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐рж╢рзЗрж╖ ржкрж░рж╛ржорж░рзНрж╢:**

ЁЯдЭ **Building Strong Friendships:**
тАв Regular contact рж░рж╛ржЦрзБржи - calls, messages, meets
тАв Active listening practice ржХрж░рзБржи - genuine interest ржирж┐ржи
тАв Support during tough times - true friends difficult times ржП ржкрж╛рж╢рзЗ ржерж╛ржХрзЗржи

ЁЯМЯ **Maintaining Friendships:**
тАв Remember important dates - birthdays, anniversaries
тАв Small gestures ржХрж░рзБржи - checking in, asking about their life
тАв Forgiveness practice ржХрж░рзБржи - nobody perfect

ЁЯОЙ **Social Skills:**
тАв Conversation skills develop ржХрж░рзБржи - open-ended questions ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи
тАв Empathy cultivate ржХрж░рзБржи - others' feelings understand ржХрж░рж╛рж░ try ржХрж░рзБржи
тАв Authentic ржерж╛ржХрзБржи - pretend ржХрж░рж╛ unnecessary

ЁЯТл **Quality vs Quantity:**
"Few genuine friends better than many superficial relationships!"

ЁЯМ║ **Friendship Quotes:**
"A real friend is one who walks in when the rest of the world walks out."
"""
    response += friendship_advice

return response

def main():
    st.set_page_config(
        page_title="Smart ржмрж╛ржВрж▓рж╛ Chatbot - ржЖржкржирж╛рж░ Mood ржмрзБржЭржмрзЗ!",
        page_icon="ЁЯдЦ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS
    st.markdown("""
    <style>
    .main-header {
        font-size: 3rem;
        color: #2E86AB;
        text-align: center;
        margin-bottom: 2rem;
    }
    .mood-indicator {
        padding: 10px;
        border-radius: 10px;
        margin: 5px;
        text-align: center;
        font-weight: bold;
    }
    .happy { background-color: #FFEAA7; color: #E17055; }
    .sad { background-color: #74B9FF; color: #0984E3; }
    .angry { background-color: #FF7675; color: #D63031; }
    .neutral { background-color: #DFE6E9; color: #2D3436; }
    .voice-btn {
        background-color: #00B894;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="main-header"> Smart ржмрж╛ржВрж▓рж╛ Chatbot</div>', unsafe_allow_html=True)
    st.markdown("### **ржЖржкржирж╛рж░ Mood ржмрзБржЭрзЗ Response ржжрж┐ржмрзЗ!** ")
    
    # Initialize session state
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "user_mood" not in st.session_state:
        st.session_state.user_mood = "neutral"
    if "mood_description" not in st.session_state:
        st.session_state.mood_description = "ржЖржкржирж╛рж░ mood ржПржЦржиржУ analyze ржХрж░рж╛ рж╣ржпрж╝ржирж┐"
    
    # Sidebar
    with st.sidebar:
        st.header("ЁЯОЫя╕П Control Panel")
        
        # Mood display
        st.subheader("ЁЯОн ржЖржкржирж╛рж░ Current Mood")
        mood_class = st.session_state.user_mood
        st.markdown(f'<div class="mood-indicator {mood_class}">{st.session_state.mood_description}</div>', 
                   unsafe_allow_html=True)
        
        # Voice recording section
        st.subheader("ЁЯОд Voice Input")
        st.info("Voice recording feature coming soon!")
        
        # Statistics
        if st.session_state.messages:
            st.subheader("ЁЯУК Statistics")
            mood_count = {}
            for msg in st.session_state.messages:
                if msg["role"] == "user" and "mood" in msg:
                    mood_count[msg["mood"]] = mood_count.get(msg["mood"], 0) + 1
            
            if mood_count:
                st.write("**Mood Distribution:**")
                for mood, count in mood_count.items():
                    st.write(f"- {mood}: {count} ржмрж╛рж░")
        
        # Clear chat
        if st.button("ЁЯЧСя╕П Chat Clear ржХрж░рзБржи"):
            st.session_state.messages = []
            st.session_state.user_mood = "neutral"
            st.session_state.mood_description = "Chat cleared!"
            st.rerun()
    
    # Main chat area
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Display chat messages
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                if message["role"] == "user" and "mood" in message:
                    st.caption(f"Mood: {message['mood']}")
    
    with col2:
        st.subheader("ЁЯТб Tips")
        st.info("""
        Try saying:
        - "ржЖржЬржХрзЗ ржЖржорж╛рж░ ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ"
        - "ржЖржорж┐ ржПржХржЯрзБ upset feel ржХрж░ржЫрж┐"
        - "ржХрж╛ржЬ ржирж┐ржпрж╝рзЗ problem рж╣ржЪрзНржЫрзЗ"
        - "ржкрж░рж┐ржмрж╛рж░рзЗрж░ situation ржнрж╛рж▓рзЛ ржирж╛"
        """)
    
    # Chat input with voice option
    st.markdown("---")
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_input = st.chat_input("ржЖржкржирж╛рж░ message рж▓рж┐ржЦрзБржи ржмрж╛ voice record ржХрж░рзБржи...")
    
    with col2:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("ЁЯОд Voice Input", use_container_width=True):
            st.info("Voice recording feature will be added soon!")
    
    if user_input:
        # Add user message to chat
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # Detect user mood
        current_mood, mood_desc = detect_user_mood(user_input)
        st.session_state.user_mood = current_mood
        st.session_state.mood_description = mood_desc
        
        # Store mood with user message
        st.session_state.messages[-1]["mood"] = current_mood
        
        # Display user message
        with st.chat_message("user"):
            st.markdown(user_input)
            st.caption(f"Mood: {current_mood}")
        
        # Generate and display bot response
        with st.chat_message("assistant"):
            with st.spinner("ЁЯдФ Thinking..."):
                time.sleep(1)  # Simulate thinking
                
                # Generate smart response
                response = generate_smart_response(
                    user_input, 
                    current_mood, 
                    st.session_state.messages
                )
                
                # Type effect
                message_placeholder = st.empty()
                full_response = ""
                for char in response:
                    full_response += char
                    message_placeholder.markdown(full_response + "тЦМ")
                    time.sleep(0.01)
                message_placeholder.markdown(full_response)
                
                # Add mood-based advice
                if current_mood == "sad":
                    st.info("ЁЯТб **рж╕рж╛ржЬрзЗрж╢ржи:** Music рж╢рзБржирзБржи, walk ржХрж░рзБржи, ржХрж╛ржЫрзЗрж░ ржорж╛ржирзБрж╖рзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзБржи")
                elif current_mood == "angry":
                    st.info("ЁЯТб **рж╕рж╛ржЬрзЗрж╢ржи:** Deep breathing ржХрж░рзБржи, counting ржХрж░рзБржи, break ржирж┐ржи")
                elif current_mood == "happy":
                    st.success("ЁЯОЙ **рж╕рж╛ржЬрзЗрж╢ржи:** ржПржЗ positive energy maintain ржХрж░рзБржи, others ржХрзЗ inspire ржХрж░рзБржи!")
        
        # Add bot response to history
        st.session_state.messages.append({
            "role": "assistant", 
            "content": response,
            "mood_aware": True
        })

if __name__ == "__main__":
    main()





