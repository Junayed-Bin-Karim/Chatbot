import streamlit as st
import time
import random

# Page configuration
st.set_page_config(
    page_title="Emotion Chatbot - ржмрж╛ржВрж▓рж╛",
    page_icon="ЁЯдЦ",
    layout="wide"
)

# Custom CSS for better appearance
st.markdown("""
<style>
    .chat-user {
        background-color: #d1ecf1;
        padding: 10px;
        border-radius: 10px;
        margin: 5px 0;
        border: 1px solid #bee5eb;
    }
    .chat-bot {
        background-color: #f8d7da;
        padding: 10px;
        border-radius: 10px;
        margin: 5px 0;
        border: 1px solid #f5c6cb;
    }
    .emotion-badge {
        background-color: #6c757d;
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        margin-left: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Cache the emotion model
@st.cache_resource
def load_emotion_model():
    try:
        from transformers import pipeline
        return pipeline("text-classification", 
                       model="bhadresh-savani/bert-base-uncased-emotion",
                       return_all_scores=True)
    except Exception as e:
        st.error(f"Model load error: {e}")
        return None

# Bengali responses based on emotions
BENGALI_RESPONSES = {
    'sadness': [
        "ржЖржорж┐ ржЦрзБржмржЗ ржжрзБржГржЦрж┐ржд ржпрзЗ ржЖржкржирж┐ ржПржнрж╛ржмрзЗ ржЕржирзБржнржм ржХрж░ржЫрзЗржиред ржЖржорж┐ ржЖржкржирж╛рж░ ржкрж╛рж╢рзЗ ржЖржЫрж┐ ЁЯТЩ",
        "ржПржЯрж╛ рж╢рзБржирзЗ ржЖржорж╛рж░ржУ ржЦрзБржм ржЦрж╛рж░рж╛ржк рж▓рж╛ржЧржЫрзЗред ржЖржкржирж┐ ржПржХрж╛ ржиржи, ржЖржорж┐ ржЖржЫрж┐ ЁЯлВ",
        "ржХржерж╛ржЧрзБрж▓рзЛ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржжред ржЖржорж┐ рж╢рзБржиржЫрж┐ ржПржмржВ ржпрждрзНржи ржирж┐ржЪрзНржЫрж┐ ЁЯМ╕"
    ],
    'joy': [
        "ржУржпрж╝рж╛ржУ! ржПржЯрж┐ рж╢рзБржирзЗ ржЖржорж┐ ржЦрзБржмржЗ ржЦрзБрж╢рж┐ рж╣рж▓рж╛ржо! ЁЯШК",
        "ржЖржкржирж╛рж░ ржЖржиржирзНржж ржжрзЗржЦрзЗ ржЖржорж╛рж░ржУ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ! тЬи",
        "ржПржЯрж╛чЬЯцШп ржЪржорзОржХрж╛рж░! ржЖржкржирж╛рж░ рж╕рзБржЦ ржЖржорж╛ржХрзЗржУ ржкрзНрж░ржнрж╛ржмрж┐ржд ржХрж░ржЫрзЗ ЁЯМЯ"
    ],
    'love': [
        "ржнрж╛рж▓рзЛржмрж╛рж╕рж╛чЬЯцШпф╕ЦчХМф╕КцЬАч╛ОчЪД ╪з╪н╪│╪з╪│! тЭдя╕П",
        "ржкрзНрж░рзЗржорзЗрж░ш┐ЩчзНцДЯшзЙчЬЯцШп ржЕрж╕рж╛ржзрж╛рж░ржг! ЁЯТХ",
        "ржЖржкржирж╛рж░ ржкрзНрж░рзЗржорзЗрж░ ржХржерж╛ рж╢рзБржирзЗцИСчЪДх┐ГржУ ржнрж░рж┐ржпрж╝рзЗ ржЧрзЗржЫрзЗ ЁЯМ╣"
    ],
    'anger': [
        "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░ржЫрж┐ ржЖржкржирж┐ рж░рж╛ржЧрж╛ржирзНржмрж┐рждред ржХрж┐ bothering ржЖржкржирж╛ржХрзЗ ржмрж▓рзБржи?",
        "рж░рзЗржЧрзЗ ржпрж╛ржУржпрж╝рж╛ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХред ржХржерж╛ ржмрж▓рзЗ ржжрзЗржЦрзБржи, рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ ЁЯлВ",
        "ржПржЗ рж░рж╛ржЧрзЗрж░ feeling ржкрзНрж░ржХрж╛рж╢ ржХрж░рж╛ important ЁЯМкя╕П"
    ],
    'fear': [
        "ржнржпрж╝ ржкрж╛ржУржпрж╝рж╛ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХред ржХрж┐цЛЕх┐Г ржХрж░ржЫрзЗржи ржмрж▓рзБржи?",
        "ржЖржкржирж┐ ржПржХрж╛ ржиржи, ржЖржорж┐ ржЖржЫрж┐ред ржнржпрж╝рзЗрж░ рж╕рж╛ржерзЗ deal ржХрж░рж╛ ржпрж╛ржпрж╝ ЁЯМИ",
        "ржПржЗ ржнржпрж╝рзЗрж░ ржХржерж╛ share ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж ЁЯМ╝"
    ],
    'surprise': [
        "ржУрж╣! ржПржЯрж┐чЬЯцШп ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд! ЁЯШо",
        "ржмрж╛рж╣! ржПржЯрж┐чЬЯцШп ржЖрж╢рзНржЪрж░рзНржпржЬржиржХ ржЦржмрж░! ЁЯОЙ",
        "ржЖржорж┐чЬЯцШп ржПржЯрж┐щвДцЦЩ ржХрж░рж┐ржирж┐! ржХрж┐ happened? тЬи"
    ]
}

# Bengali small talk responses
BENGALI_SMALL_TALK = {
    'greeting': [
        "ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ ржЗржорзЛрж╢ржи ржЪрзНржпрж╛ржЯржмржЯ ЁЯдЦ",
        "рж╣рзНржпрж╛рж▓рзЛ! ржХрзЗржоржи ржЖржЫрзЗржи ржЖржкржирж┐? ЁЯШК",
        "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо! ржХржерж╛ ржмрж▓рзБржи ЁЯОИ"
    ],
    'how_are_you': [
        "ржЖржорж┐ ржнрж╛рж▓рзЛ ржЖржЫрж┐, ржзржирзНржпржмрж╛ржж! ржЖржкржирж╛рж░ ржХржерж╛ рж╢рзБржирзЗ ржЦрзБрж╢рж┐ рж╣рж▓рж╛ржо ЁЯМЯ",
        "ржЖржорж┐ ржарж┐ржХ ржЖржЫрж┐! ржЖржкржирж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзЗ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ЁЯШД",
        "ржЖржорж┐ great! ржЖржкржирж┐ ржХрзЗржоржи ржЖржЫрзЗржи? ЁЯМИ"
    ],
    'thanks': [
        "ржЖржкржирж╛ржХрзЗржУ ржзржирзНржпржмрж╛ржж! ЁЯШК",
        "ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ ржирзЗржЗ! ржЖржмрж╛рж░ ржХржерж╛ ржмрж▓ржмрзЗржи ЁЯМ╕",
        "ржЖржкржирж╛рж░ ржХржерж╛ржпрж╝ ржЖржорж┐ ржЦрзБрж╢рж┐ ЁЯМЯ"
    ],
    'name': [
        "ржЖржорж┐ ржПржХржЯрж┐ ржЗржорзЛрж╢ржи ржбрж┐ржЯрзЗржХрж╢ржи ржЪрзНржпрж╛ржЯржмржЯ! ржЖржорж╛рж░ ржирж╛ржо ржЗржорзЛ-ржмржЯ ЁЯдЦ",
        "ржЖржорж┐ржЗ ржЖржкржирж╛рж░ ржмрж╛ржВрж▓рж╛ ржЗржорзЛрж╢ржи ржЪрзНржпрж╛ржЯржмржЯ! ЁЯШК"
    ],
    'joke': [
        "ржХрзЗржи scientists ржкрж░ржорж╛ржгрзБ ржмрж┐рж╢рзНржмрж╛рж╕ ржХрж░рзЗ ржирж╛? ржХрж╛рж░ржг рждрж╛рж░рж╛ рж╕ржмржХрж┐ржЫрзБ рждрзИрж░рж┐ ржХрж░рзЗ! ЁЯШД",
        "ржПржХржЯрж╛ ржорзБрж░ржЧрж┐ рж░рж╛рж╕рзНрждрж╛ ржкрж╛рж░ рж╣ржпрж╝рзЗржЫрж┐рж▓ред ржХрзЗржи? ржУржкрж╛рж░рзЗ ржпрзЗрждрзЗ! ЁЯРФ",
        "ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржХржЦржирзЛ ржарж╛ржирзНржбрж╛ рж▓рж╛ржЧрзЗ ржирж╛? ржХрж╛рж░ржг рждрж╛рж░ ржЙржЗржирзНржбрзЛржЬ ржЖржЫрзЗ! ЁЯТ╗"
    ]
}

def detect_bengali_small_talk(text):
    """ржмрж╛ржВрж▓рж╛ small talk detect ржХрж░рж╛"""
    text_lower = text.lower()
    
    if any(word in text_lower for word in ['рж╣рзНржпрж╛рж▓рзЛ', 'рж╣рж╛ржЗ', 'ржиржорж╕рзНржХрж╛рж░', 'ржЖрж╕рж╕рж╛рж▓рж╛ржо']):
        return random.choice(BENGALI_SMALL_TALK['greeting'])
    elif any(word in text_lower for word in ['ржХрзЗржоржи', 'ржХрж┐ ржЕржмрж╕рзНржерж╛', 'ржХрзЗржоржи ржЖржЫ']):
        return random.choice(BENGALI_SMALL_TALK['how_are_you'])
    elif any(word in text_lower for word in ['ржзржирзНржпржмрж╛ржж', 'ржерзНржпрж╛ржВржХрж╕', 'рж╢рзБржХрж░рж┐ржпрж╝рж╛']):
        return random.choice(BENGALI_SMALL_TALK['thanks'])
    elif any(word in text_lower for word in ['ржирж╛ржо', 'ржХрзЗ', 'рждрзЛржорж╛рж░']):
        return random.choice(BENGALI_SMALL_TALK['name'])
    elif any(word in text_lower for word in ['ржЬрзЛржХ', 'ржХржорзЗржбрж┐', 'ржоржЬрж╛рж░']):
        return random.choice(BENGALI_SMALL_TALK['joke'])
    
    return None

def get_bengali_response(emotion, confidence):
    """ржЗржорзЛрж╢ржи based ржмрж╛ржВрж▓рж╛ response"""
    if emotion in BENGALI_RESPONSES:
        return random.choice(BENGALI_RESPONSES[emotion])
    else:
        return "ржЖржкржирж╛рж░ ржХржерж╛ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж ЁЯМЯ"

def main():
    # Header
    st.title("ЁЯдЦ ржмрж╛ржВрж▓рж╛ ржЗржорзЛрж╢ржи ржЪрзНржпрж╛ржЯржмржЯ")
    st.markdown("ржЖржорж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рзБржи, ржЖржорж┐ ржЖржкржирж╛рж░ emotions ржмрзБржЭрждрзЗ ржкрж╛рж░ржм! ЁЯТм")
    
    # Sidebar
    with st.sidebar:
        st.header("тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕")
        st.markdown("""
        **ржХрж┐ржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи:**
        - рж╢рзБржзрзБ ржЯрж╛ржЗржк ржХрж░рзБржи ржПржмржВ ржПржирзНржЯрж╛рж░ ржЪрж╛ржкрзБржи
        - ржЖржорж┐ ржЖржкржирж╛рж░ emotions detect ржХрж░ржм
        - ржмрж╛ржВрж▓рж╛ ржмрж╛ English ржЙржнржпрж╝рждрзЗржЗ рж▓рж┐ржЦрждрзЗ ржкрж╛рж░рзЗржи
        """)
        
        if st.button("ЁЯЧСя╕П ржХржиржнрж╛рж░рж╕рзЗрж╢ржи ржХрзНрж▓рж┐ржпрж╝рж╛рж░ ржХрж░рзБржи"):
            st.session_state.messages = []
            st.rerun()
    
    # Load emotion model
    emotion_model = load_emotion_model()
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Display chat messages
    for message in st.session_state.messages:
        if message["role"] == "user":
            with st.chat_message("user"):
                st.markdown(f"<div class='chat-user'>{message['content']}</div>", unsafe_allow_html=True)
        else:
            with st.chat_message("assistant"):
                st.markdown(f"<div class='chat-bot'>{message['content']}</div>", unsafe_allow_html=True)
                if "emotion" in message:
                    st.caption(f"ЁЯза рж╕ржирж╛ржХрзНржд emotion: {message['emotion']} ({message['confidence']}%)")
    
    # Chat input
    if prompt := st.chat_input("ржЖржкржирж╛рж░ ржоржирзЗрж░ ржХржерж╛ рж▓рж┐ржЦрзБржи..."):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Display user message immediately
        with st.chat_message("user"):
            st.markdown(f"<div class='chat-user'>{prompt}</div>", unsafe_allow_html=True)
        
        # Generate bot response
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            
            # Check for small talk first
            small_talk_response = detect_bengali_small_talk(prompt)
            
            if small_talk_response:
                full_response = small_talk_response
                emotion = "small_talk"
                confidence = "100"
            else:
                # Detect emotion using AI model
                if emotion_model:
                    try:
                        results = emotion_model(prompt)
                        emotion_data = max(results[0], key=lambda x: x['score'])
                        emotion = emotion_data['label']
                        confidence = f"{emotion_data['score']*100:.1f}"
                    except:
                        emotion = "neutral"
                        confidence = "50.0"
                else:
                    emotion = "neutral"
                    confidence = "50.0"
                
                # Get Bengali response
                full_response = get_bengali_response(emotion, confidence)
            
            # Simulate typing effect
            typing_response = ""
            for char in full_response:
                typing_response += char
                message_placeholder.markdown(f"<div class='chat-bot'>{typing_response}</div>", unsafe_allow_html=True)
                time.sleep(0.02)
            
            # Show emotion detection info
            if emotion != "small_talk":
                st.caption(f"ЁЯза рж╕ржирж╛ржХрзНржд emotion: {emotion} ({confidence}% confidence)")
        
        # Add assistant response to chat history
        st.session_state.messages.append({
            "role": "assistant", 
            "content": full_response,
            "emotion": emotion,
            "confidence": confidence
        })

    # Statistics section
    if st.session_state.messages:
        st.sidebar.markdown("---")
        st.sidebar.header("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи")
        
        # Count emotions
        emotion_count = {}
        for msg in st.session_state.messages:
            if "emotion" in msg and msg["emotion"] != "small_talk":
                emotion_count[msg["emotion"]] = emotion_count.get(msg["emotion"], 0) + 1
        
        if emotion_count:
            st.sidebar.write("**Emotions detected:**")
            for emotion, count in emotion_count.items():
                st.sidebar.write(f"- {emotion}: {count} ржмрж╛рж░")

if __name__ == "__main__":
    main()
