import streamlit as st
import time
import random

# Simple emotion detection without transformers
def simple_emotion_detection(text):
    text_lower = text.lower()
    
    joy_words = ['happy', 'joy', 'excited', 'good', 'great', 'wonderful', 'amazing', 'ржЦрзБрж╢рж┐', 'ржнрж╛рж▓рзЛ', 'ржоржЬрж╛']
    sadness_words = ['sad', 'unhappy', 'depressed', 'bad', 'terrible', 'ржжрзБржГржЦ', 'ржЦрж╛рж░рж╛ржк', 'ржХрж╖рзНржЯ']
    anger_words = ['angry', 'mad', 'frustrated', 'hate', 'рж░рж╛ржЧ', 'ржХрзНрж░рзЛржз', 'ржЭржЧржбрж╝рж╛']
    fear_words = ['scared', 'afraid', 'fear', 'worried', 'ржнржпрж╝', 'ржЪрж┐ржирзНрждрж╛', 'ржЖрж╢ржЩрзНржХрж╛']
    
    if any(word in text_lower for word in joy_words):
        return 'joy', 0.85
    elif any(word in text_lower for word in sadness_words):
        return 'sadness', 0.85
    elif any(word in text_lower for word in anger_words):
        return 'anger', 0.85
    elif any(word in text_lower for word in fear_words):
        return 'fear', 0.85
    else:
        return 'neutral', 0.5

# Bengali responses
BENGALI_RESPONSES = {
    'joy': [
        "ржЖрж╣рж╛! ржЦрзБржм ржнрж╛рж▓рзЛ рж▓рж╛ржЧрж▓ рж╢рзБржирзЗ! ЁЯШК",
        "ржЖржкржирж╛рж░ ржЖржиржирзНржжрзЗ ржЖржорж┐ржУ ржЦрзБрж╢рж┐! тЬи",
        "ржУржпрж╝рж╛ржУ! ржПржЯрж┐чЬЯцШп ржЪржорзОржХрж╛рж░ ржЦржмрж░! ЁЯМЯ"
    ],
    'sadness': [
        "ржЖржорж┐ ржЦрзБржмржЗ ржжрзБржГржЦрж┐ржд рж╢рзБржирзЗ ЁЯТЩ",
        "ржЖржкржирж╛рж░ ржкрж╛рж╢рзЗ ржЖржЫрж┐ ЁЯлВ", 
        "ржХржерж╛ ржмрж▓рзЗ ржжрзЗржЦрзБржи, рж╣рж╛рж▓ржХрж╛ рж╣ржмрзЗ ЁЯМ╕"
    ],
    'anger': [
        "рж░рж╛ржЧ рж╣ржУржпрж╝рж╛ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ЁЯМкя╕П",
        "ржХрж┐ bothering ржЖржкржирж╛ржХрзЗ ржмрж▓рзБржи?",
        "рж╢рж╛ржирзНржд рж╣рзЛржи, ржЖржорж┐ ржЖржЫрж┐ ЁЯлВ"
    ],
    'fear': [
        "ржнржпрж╝ ржкрж╛ржУржпрж╝рж╛ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ЁЯМИ",
        "ржХрж┐ worry ржХрж░ржЫрзЗржи ржмрж▓рзБржи?",
        "ржЖржкржирж┐ ржПржХрж╛ ржиржи ЁЯМ╝"
    ],
    'neutral': [
        "ржмрзБржЭрждрзЗ ржкрж╛рж░рж▓рж╛ржо ЁЯМЯ",
        "ржЖрж░ржУ ржмрж▓рзБржи... ЁЯТм",
        "ржоржЬрж╛рж░ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯШД"
    ]
}

def main():
    st.set_page_config(
        page_title="ржмрж╛ржВрж▓рж╛ ржЪрзНржпрж╛ржЯржмржЯ",
        page_icon="ЁЯдЦ",
        layout="wide"
    )
    
    st.title("ЁЯдЦ рж╕рж░рж▓ ржмрж╛ржВрж▓рж╛ ржЪрзНржпрж╛ржЯржмржЯ")
    st.markdown("ржЖржорж╛рж░ рж╕рж╛ржерзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ ржХржерж╛ ржмрж▓рзБржи! ЁЯТм")
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Display chat messages
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if "emotion" in message:
                st.caption(f"Emotion: {message['emotion']} ({message['confidence']}%)")
    
    # Chat input
    if prompt := st.chat_input("ржЖржкржирж╛рж░ ржоржирзЗрж░ ржХржерж╛ рж▓рж┐ржЦрзБржи..."):
        # Add user message
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Generate response
        with st.chat_message("assistant"):
            with st.spinner("ржнрж╛ржмржЫрж┐..."):
                time.sleep(1)  # Simulate thinking
                
                # Detect emotion
                emotion, confidence = simple_emotion_detection(prompt)
                
                # Get Bengali response
                response = random.choice(BENGALI_RESPONSES.get(emotion, BENGALI_RESPONSES['neutral']))
                
                full_response = f"{response}"
                
                st.markdown(full_response)
                st.caption(f"ЁЯза Emotion: {emotion} ({confidence*100:.1f}%)")
        
        # Add to history
        st.session_state.messages.append({
            "role": "assistant", 
            "content": full_response,
            "emotion": emotion,
            "confidence": f"{confidence*100:.1f}"
        })

if __name__ == "__main__":
    main()
